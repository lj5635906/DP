设计模式--------代理模式

提供了间接对目标对象进行访问的方式。
即通过代理对象访问目标对象，这样做的好处，可以在目标对象实现的功能上，增加额外的功能补充，即扩展目标对象的功能



静态代理：
由程序员创建或特定工具自动生成源代码，再对其进行编译。在程序运行之前，代理类就已经被创建。
动态代理：
动态代理类的源码是在程序运行期间由JVM根据反射等机制动态生成，所以不存在代理类的字节码文件。

静态代理和动态代理的比较：
动态代理将接口中声明的所有方法都转移到调用处理器一个集中的方法中处理，InvocationHandler.invoke。
我们可以进行灵活的处理，不需要像静态代理那样每一个方法进行中转。


JDK动态代理和CGlib动态代理比较
JDK动态代理：目标对象一定要实现接口，否则不能使用动态代理
CGlib动态代理：继承目标类以目标对象子类的方式实现代理。它是在内存中构建一个子类对象从而实现对目标对象功能的扩展


优点：
职责清晰：
    具体角色的实现实体的业务逻辑，不需要关系其他非本职责的事务。
高扩展性：
    具体角色随时发生变化，但是只要实现了接口，接口不变，代理类就可以做任何修饰继续使用，符合开闭原则
智能化